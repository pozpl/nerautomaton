buildscript {
	ext {
		springBootVersion = '2.7.0'
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.postgresql:postgresql:42.3.4"
	}
}

plugins {
	id "org.flywaydb.flyway" version "6.4.1"
	id "io.freefair.lombok" version "6.4.3"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



group = 'com.pozpl'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':modules:user:user-impl')
	implementation project(':modules:auth:auth-impl')
	implementation project(':modules:ner:ner-impl')
	implementation project(':modules:admin:admin-impl')
	implementation project(':modules:shared')
	runtimeOnly(project(':modules:frontend'))

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.1.1.RELEASE'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

	//migrations integrated in app start
	implementation 'org.flywaydb:flyway-core'

	implementation group: 'io.vavr', name: 'vavr', version: '0.10.2'
	implementation group: 'io.vavr', name: 'vavr-match', version: '0.10.2'
	implementation group: 'io.vavr', name: 'vavr-match-processor', version: '0.10.2'


	implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

subprojects {
	// this sets the group and version the same as the root
	group = rootProject.group
	version = rootProject.version

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}

//	dependencyManagement {
//		imports {
//			// use the same spring boot version as in the root
//			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
//		}
//	}

	// define dependencies every module will inherit
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-validation'

		implementation group: 'io.vavr', name: 'vavr', version: '0.10.2'
		implementation group: 'io.vavr', name: 'vavr-match', version: '0.10.2'
		implementation group: 'io.vavr', name: 'vavr-match-processor', version: '0.10.2'

		implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

		runtimeOnly 'org.springframework.boot:spring-boot-devtools'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}

	test {
		useJUnitPlatform()
	}
}


flyway {
	url = 'jdbc:postgresql://localhost:5432/ner'
	user = 'ner_user'
//	password = 'mySecretPwd'
}


//------------------------------------------------------------------------------------------------------------------------
//    Tasks - Standalone backend
//------------------------------------------------------------------------------------------------------------------------

task bootStandaloneBackend {
	group 'application'
	dependsOn bootRun
}

//------------------------------------------------------------------------------------------------------------------------
//    Tasks - Application
//------------------------------------------------------------------------------------------------------------------------

task copyCompiledJs(type: Copy) {
	group 'application'
	from "${project(':modules:frontend').projectDir}/dist/frontend"
	into "${rootDir}/src/main/resources/static"
	doLast {
		println("Copy files finished")
	}
}

task buildJsAndCopyToSpring(type: GradleBuild){
	group 'application'
	setTasks([':modules:frontend:buildStandaloneClient', ':copyCompiledJs'])
}

task bootFullApplication(type: GradleBuild) {
	group 'application'
	setTasks([':modules:frontend:npmUpdate', ':modules:frontend:clean', ':buildJsAndCopyToSpring', ':bootRun'])
}


processResources.dependsOn buildJsAndCopyToSpring